<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   width="800" height="600" backgroundColor="#847777"
					   preloaderChromeColor="#524E4E"
					   title="AirMusic"
					   initialize="init_All();init_application();">
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	<fx:Style source="LecteurMP3.css"/>
	
	<fx:Script>
		<![CDATA[
			import BO.Music;
			
			import DB.Database;
			
			import mx.collections.ArrayCollection;
			import mx.containers.TitleWindow;
			import mx.controls.Alert;
			import mx.controls.FlexNativeMenu;
			import mx.controls.Menu;
			import mx.controls.TextInput;
			import mx.controls.sliderClasses.Slider;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.events.FlexNativeMenuEvent;
			import mx.events.FlexNativeWindowBoundsEvent;
			import mx.events.ListEvent;
			import mx.events.MenuEvent;
			import mx.events.SliderEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.AsyncToken;
			import mx.rpc.CallResponder;
			import mx.utils.ArrayUtil;
			
			import services.echonest.Echonest;
			
			import spark.components.Group;
			import spark.components.Label;
			import spark.components.Panel;
			import spark.components.TextArea;
			import spark.components.TextInput;
			import spark.events.GridSelectionEvent;
			
			public var listeMenu1:Array;
			
			private var _Menu1:FlexNativeMenu;
			public var list:Array;
			private var _clicked : Object;
			

			public function get Menu1():FlexNativeMenu
			{
				return _Menu1;
			}

			public function set Menu1(value:FlexNativeMenu):void
			{
				_Menu1 = value;
			}

			public function get window():TitleWindow
			{
				return _window;
			}

			public function set window(value:TitleWindow):void
			{
				_window = value;
			}


			
			public function get clicked():Object
			{
				return _clicked;
			}

			public function set clicked(value:Object):void
			{
				_clicked = value;
			}

			protected function build_menu_item () : void
			{
				list = new Array();
				
				for each ( var play:* in Application.Instance.list_playlist)
				{
					list.push ({label:play.Name, id:play.ID_Playlist});
				}
				
				listeMenu1 = [{label: "Ajouter a la liste de lecture"},
					{label: "Ajouter sur une playlist", children: list}];
			}
			protected function init_application ():void
			{
				var application:Application = Application.Instance;
			}
			
			protected function Play_clickHandler(event:MouseEvent):void
			{
				var player:Player = new Player ();
				var appli:Application = Application.Instance;
				appli._player.play();
			}
			
			protected function Stop_clickHandler(event:MouseEvent):void
			{
				var appli:Application = Application.Instance;
				appli._player.stop();
			}
			
			protected function myMenuBar_changeHandler(event:MenuEvent):void
			{
				// TODO Auto-generated method stub
				
			}
		
			protected function menuBar_clickHandler(event:MenuEvent):void
			{
				//trace ("event name" + event.item.@name);
				if (event.item.@name == "add")
				{
					var file_search:Filesearch = new Filesearch ();		
					
				}
				
				if (event.item.@name == "add_playlist")
				{
					add_playlist();
				}
		
				if (event.item.@name == "music")
				{
					HTTP_Request.request("Children of bodom", "children of bodom");
				}
			}
			
			private var _window:TitleWindow;
		    private var _input: spark.components.TextInput;
			
			public function add_playlist () : void
			{
					var label:Label = new Label ();
					
					var button:Button = new Button();

					
					_input = new spark.components.TextInput();
					button.label = "ok";
					label.text = "Ajouter un nom de playlist";
					window = TitleWindow(PopUpManager.createPopUp(this, TitleWindow));
					window.width = 200;
					window.height = 100;
					
					window.addChild(label);
					
					window.addChild(_input);
					window.addChild(button);
					
					button.addEventListener(MouseEvent.CLICK, clickButton);
					PopUpManager.centerPopUp(_window);
				
			}
			
			
			protected function clickButton (event:MouseEvent) : void
			{
				var name:String = _input.text;
				if (name != "" && name != null)
				{
					var insert_play:String = "INSERT INTO Playlist (Name) VALUES ('"+name+"')";
					var sql_res:SQLResult = Database.exec_query(null,  insert_play);	
				
				
				
				if (sql_res != null)
				{
					var playlist:Object = new Object;
					playlist.ID_Playlist = sql_res.lastInsertRowID;
					playlist.Name = name;
					playlist.Musics = new Array;
					Application.Instance.list_playlist.push(playlist);
				}
				}
				Application.Instance.display.playCollection.removeAll();
				Application.Instance.display.fill_playlist(DB.Database.get_playlists());
				PopUpManager.removePopUp(_window);
			}
			
			public function init_All() : void
			{
				var app:Application = Application.Instance;
				
				app.display.fill_tab(Application.Instance.list_music);
				app.display.fill_playlist(Application.Instance.list_playlist);
			}
			
			
			protected function SpeekerLevel_changeHandler(event:Event):void
			{
				//trace (String(event.currentTarget.value));
				var appli:Application = Application.Instance;
				appli._player.change_volume (event.currentTarget.value);
			}
			
			protected function Rewind_clickHandler(event:MouseEvent):void
			{
				var appli:Application = Application.Instance;
				appli._player.rewind();
			}
			
			protected function forwind_clickHandler(event:MouseEvent):void
			{
				var appli:Application = Application.Instance;
				appli._player.forward();
				
			}
			
			protected function ShuffleButton_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function RepeatButton_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function PlayProgress_changeHandler(event:Event):void
			{
				// TODO Auto-generated method stub
					
			}
			
			protected function MusicTable_selectionChangeHandler(event:GridSelectionEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function progressBar_changeHandler(event:Event):void
			{
				progressBar.value = event.currentTarget.value;
				var appli:Application = Application.Instance;
				appli._player.change_position(event.currentTarget.value);
				
			}

			protected function refererRowDoubleClicked(e:ListEvent):void 
			{
				var music:Music = new Music;
				music.Artist = e.itemRenderer.data.ArtistField;
				music.Album = e.itemRenderer.data.AlbumField;
				music.Genre = e.itemRenderer.data.GenreField;
				music.ID_Music = e.itemRenderer.data.ID;
				music.Path = e.itemRenderer.data.Path;
				music.Title = e.itemRenderer.data.TitleField;
				music.Path_Cover = e.itemRenderer.data.Path_cover;
				Application.Instance._player.insert_and_play_music(music);
			}
			
			
			protected function GenreTable_itemClickHandler(event:ListEvent):void
			{
				Application.Instance.display.musicCollection.removeAll();
				Application.Instance.display.artistCollection.removeAll();
				Application.Instance.display.albumCollection.removeAll();
				
				Application.Instance.display.artistTab.push({ArtistBase:"Tout"});
				Application.Instance.display.albumTab.push({AlbumBase:"Tout"});
				if (event.itemRenderer.data.GenreBase != "Tout")
				{
					Application.Instance.display.update(DB.Database.list_query("select * from Music where Music.genre = \""+event.itemRenderer.data.GenreBase+"\""));
				}
				else
				{
					Application.Instance.display.update(Application.Instance.list_music);
				}
			}
			
				
			protected function ArtistTable_itemClickHandler(event:ListEvent):void
			{
				Application.Instance.display.musicCollection.removeAll();
				Application.Instance.display.albumCollection.removeAll();			
				
				Application.Instance.display.albumTab.push({AlbumBase:"Tout"});
				if (event.itemRenderer.data.ArtistBase != "Tout")
				{
					Application.Instance.display.update(DB.Database.list_query("select * from Music where Music.artist = \""+event.itemRenderer.data.ArtistBase+"\""));
				}
				else
				{
					Application.Instance.display.update(DB.Database.list_query("select * from Music"));
				}
			}
			
			protected function AlbumTable_itemClickHandler(event:ListEvent):void
			{
				Application.Instance.display.musicCollection.removeAll();
				
				if (event.itemRenderer.data.AlbumBase != "Tout")
				{
					Application.Instance.display.update(DB.Database.list_query("select * from Music where Music.album = \""+event.itemRenderer.data.AlbumBase+"\""));
				}
				else
				{
					Application.Instance.display.update(Application.Instance.list_music);
				}
			}
			
			protected function PlaylistTab_itemClickHandler(event:ListEvent):void
			{
				
				Application.Instance.display.musicCollection.removeAll();
				
				for each (var play:* in Application.Instance.list_playlist)
				{
					if (play.Name === event.itemRenderer.data.PlaylistField)
					{
						
						Application.Instance.display.update(play.Musics);					
					}
				}
			}
			
			
			protected function MusicTable_rightClickHandler(event:MouseEvent):void
			{
				build_menu_item();
				clicked = event.target.data;
				contextmenu ();
			}
			
			protected function contextmenu() : void
			{			
					Menu1 = new FlexNativeMenu();
					Menu1.dataProvider = listeMenu1;
					Menu1.showRoot = false;
					Menu1.setContextMenu(MusicTable);
					Menu1.addEventListener(FlexNativeMenuEvent.ITEM_CLICK, actionClicMenu);
					

			}
			
			
			
			protected function actionClicMenu(e:FlexNativeMenuEvent) : void
			{
				var id_music : int = clicked.ID;
				var id_Playlist : int = e.item.id;
				
					if ("Ajouter a la liste de lecture" == e.label)
					{
						var music : Music = new Music;		
						music.Album = clicked.AlbumField;
						music.Artist = clicked.ArtistField;
						music.Genre = clicked.GenreField;
						music.ID_Music = clicked.ID;
						music.Length = clicked.LengthField;
						music.Path = clicked.Path;
						music.Path_Cover = clicked.Path_cover;
						music.Title = clicked.TitleField;
						
						Application.Instance._player.add_music(music);
						Menu1.removeEventListener(FlexNativeMenuEvent.ITEM_CLICK, actionClicMenu);
					}
					else
					{
	 					Database.exec_query(null, "INSERT INTO In_Playlist (ID_Playlist, ID_Music) VALUES ("+id_Playlist+", "+id_music+")");
						Application.Instance.display.playCollection.removeAll();
						var test : Array = DB.Database.get_playlists();
						Application.Instance.list_playlist=DB.Database.get_playlists();
						Application.Instance.display.fill_playlist(DB.Database.get_playlists());
						Menu1.unsetContextMenu(MusicTable);
						Menu1.removeEventListener(FlexNativeMenuEvent.ITEM_CLICK, actionClicMenu);
					}
					

				
			}
			
			
				
			
				
			protected function PlaylistTab_itemDoubleClickHandler(event:ListEvent):void
				
            {
					
		        var musiclist : Array = new Array;

				Application.Instance._player.stop();
		        Application.Instance.display.musicCollection.removeAll();
		        Application.Instance._player.music_list = null;
		        Application.Instance._player.music_list = new Array();
		        FlexGlobals.topLevelApplication.current_playlist.removeAllElements();
		
		        for each (var play:* in Application.Instance.list_playlist)
		
		        {
			         if (play.Name === event.itemRenderer.data.PlaylistField)
				
				          {
					           Application.Instance.display.update(play.Musics);
					           for (var i : int = 0; i < play.Musics.length; i++)
						       {
						    	  var music:Music = new Music;
								  
							      music.Album = play.Musics[i].Album;
							      music.Artist = play.Musics[i].Artist;
					 		      music.Genre = play.Musics[i].Genre;
					              music.ID_Echonest = play.Musics[i].ID_Echonest;
					              music.ID_Music = play.Musics[i].ID_Music;
					              music.Length = play.Musics[i].Length;
							      music.Path = play.Musics[i].Path;
							      music.Title = play.Musics[i].Title;
								  if (play.Musics[i].Path_Cover != null)
									  music.Path_Cover = play.Musics[i].Path_Cover;
								  else
									  music.Path_Cover = "";						

		             			  Application.Instance._player.add_music(music);
							
		            			}            
					
		          			}	
			
		       }
	
		        Application.Instance._player.play();
		}
				
  

		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Placer ici les éléments non visuels (services et objets de valeur, par exemple). -->
	</fx:Declarations>
	<s:VGroup width="100%" height="100%" verticalAlign="top">
		<s:HGroup id="MenuGroup" width="100%" height="3%">
			<mx:MenuBar id="myMenuBar" color="#FFFFFF" itemClick="menuBar_clickHandler(event)"
						labelField="@label">
				<fx:XMLList>
					<menuitem label="Fichier">
						<menuitem label="Ajouter un dossier" name="add"/>
						<menuitem label = "Creer une playlist" name="add_playlist"/>
						<menuitem label ="Importer une playlist"/>
					</menuitem>
				</fx:XMLList>
			</mx:MenuBar>
		</s:HGroup>
		<s:HGroup width="100%" height="85%">

			<s:VGroup id="InfoPlaylistGroup" width="20%" height="100%">
				<mx:DataGrid id="PlaylistTab" width="100%" height="100%" color="#FFFFFF"
							dataProvider="{Application.Instance.display.playCollection}"
							itemClick="PlaylistTab_itemClickHandler(event)"
							doubleClickEnabled="true"
							itemDoubleClick="PlaylistTab_itemDoubleClickHandler(event)">
					<mx:columns>
						
							<mx:DataGridColumn dataField="PlaylistField" headerText="Playlist"/>
						
					</mx:columns>
				</mx:DataGrid>
			</s:VGroup>
			<s:Scroller width="100%" height="100%">
				<s:VGroup id="MusicGroup" width="100%" height="100%">
					<s:HGroup id="EasySearch" width="100%" height="35%">
						<mx:DataGrid id="GenreTable" width="33%" height="100%" borderVisible="true"
									color="#FFFFFF" contentBackgroundColor="#D2CACA"
									dataProvider="{Application.Instance.display.genreCollection}"
									itemClick="GenreTable_itemClickHandler(event)"
									selectionColor="#656060">
							<mx:columns>
								
									<mx:DataGridColumn dataField="GenreBase" headerText="Genre"/>
								
							</mx:columns>
							
						</mx:DataGrid>
						<mx:DataGrid id="ArtistTable" width="33%" height="100%" color="#FFFFFF"
									contentBackgroundColor="#CEC6C6"
									dataProvider="{Application.Instance.display.artistCollection}"
									itemClick="ArtistTable_itemClickHandler(event)"
									selectionColor="#726C6C">
							<mx:columns>
									<mx:DataGridColumn dataField="ArtistBase" headerText="Artiste"/>
							</mx:columns>
						</mx:DataGrid>
						<mx:DataGrid id="AlbumTable" width="31%" height="100%" borderVisible="true"
									chromeColor="#816A6A" color="#FFFFFF"
									contentBackgroundColor="#CEC7C7"
									dataProvider="{Application.Instance.display.albumCollection}"
								    itemClick="AlbumTable_itemClickHandler(event)" selectionColor="#60635F">
							<mx:columns>
								
									<mx:DataGridColumn dataField="AlbumBase" headerText="Album"/>
								
							</mx:columns>
						</mx:DataGrid>
					</s:HGroup>
					<mx:DataGrid id="MusicTable" width="99%" height="65%" borderVisible="false"
								 color="#FFFFFF" contentBackgroundColor="#D1C6C6"
								 dataProvider="{Application.Instance.display.musicCollection}" editable="false" selectionColor="#605B5B"
								 doubleClickEnabled="true" itemDoubleClick="refererRowDoubleClicked(event)"
								 rightClick="MusicTable_rightClickHandler(event)">
						<mx:columns>
								<mx:DataGridColumn dataField="TitleField" headerText="Titre"/>
								<mx:DataGridColumn dataField="ArtistField" headerText="Artiste"/>
								<mx:DataGridColumn dataField="AlbumField" headerText="Album"/>
								<mx:DataGridColumn dataField="GenreField" headerText="Genre"/>
								<mx:DataGridColumn dataField="LengthField" headerText="Durée"/>
							
						</mx:columns>
					</mx:DataGrid>
				</s:VGroup>
			</s:Scroller>
		</s:HGroup>
		<s:VGroup width="100%" height="174" horizontalCenter="0" verticalCenter="0">
			<s:Scroller width="100%" height="135" >
			<s:HGroup id="current_playlist" width="100%" height="70%" color="#180B0B" clipAndEnableScrolling="true">
			</s:HGroup>
			</s:Scroller> 
			<!-- <s:HScrollBar viewport="{current_playlist}" width="100%" /> -->
			<s:HGroup id="PlayElement" width="100%" height="11%" verticalAlign="middle">
				<s:Button id="Rewind" y="20" width="15%" height="100%" label="Back"
						  click="Rewind_clickHandler(event)"/>
				<s:Button id="Play" y="20" width="15%" height="100%" label="Play"
						  click="Play_clickHandler(event)"/>
				<s:Button id="Stop" y="21" width="15%" height="100%" label="Stop"
						  click="Stop_clickHandler(event)"/>
				<s:Button id="forwind" y="19" width="15%" height="100%" label="Next"
						  click="forwind_clickHandler(event)"/>
				<s:HSlider id="SpeekerLevel" width="71" change="SpeekerLevel_changeHandler(event)"
						   maximum="1" minimum="0" snapInterval="0.01" value="1"/>
				<s:HSlider id="progressBar" width="90%" change="progressBar_changeHandler(event)"
						   maximum="100" minimum="0" skinClass="spark.skins.spark.HSliderSkin"
						   stepSize="0.05"/>
				
				<!--<mx:ProgressBar id="progressBar" visible="true" y="8" width="326" height="100%"
								label="Time" color="#FF0E0E" direction="right" enabled="true"
								indeterminate="false"
								labelPlacement="right"
								barSkin="skins.CustomSkin"
								mode="manual"
								maximum="100" minimum="0"/>-->
				
				<s:ToggleButton id="ShuffleButton" width="10%" height="100%" label="Shuffle"
								click="ShuffleButton_clickHandler(event)"/>
				<s:ToggleButton id="RepeatButton" width="10%" height="100%" label="Repeat"
								click="RepeatButton_clickHandler(event)"/>
			</s:HGroup>
		</s:VGroup>
	</s:VGroup>
</s:WindowedApplication>
