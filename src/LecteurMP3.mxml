<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   width="800" height="600" backgroundColor="#847777"
					   preloaderChromeColor="#524E4E"
					   title="AirMusic"
					   initialize="init_All();init_application();">
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	<fx:Style source="LecteurMP3.css"/>
	
	<fx:Script>
		<![CDATA[
			protected function PlaylistTab_itemClickHandler(event:ListEvent):void
			{
				// TODO Auto-generated method stub
				
			}
		]]>
	</fx:Script>
	
	
	<fx:Script>
		<![CDATA[
			import BO.Music;
			
			import DB.Database;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.Menu;
			import mx.controls.sliderClasses.Slider;
			import mx.core.UIComponent;
			import mx.events.FlexNativeWindowBoundsEvent;
			import mx.events.ListEvent;
			import mx.events.MenuEvent;
			import mx.events.SliderEvent;
			import mx.rpc.AsyncToken;
			import mx.rpc.CallResponder;
			
			import services.echonest.Echonest;
			
			import spark.events.GridSelectionEvent;

			
			protected function init_application ():void
			{
				var application:Application = Application.Instance;
			}
			
			protected function Play_clickHandler(event:MouseEvent):void
			{
				var player:Player = new Player ();
				var appli:Application = Application.Instance;
				appli._player.test("");
			}
			
			protected function Stop_clickHandler(event:MouseEvent):void
			{
				var appli:Application = Application.Instance;
				appli._player.stop();
			}
			
			protected function myMenuBar_changeHandler(event:MenuEvent):void
			{
				// TODO Auto-generated method stub
				
			}
		
			protected function menuBar_clickHandler(event:MenuEvent):void
			{
				//trace ("event name" + event.item.@name);
				if (event.item.@name == "add")
				{
					var file_search:Filesearch = new Filesearch ();		
					
				}
				
				if (event.item.@name == "add_playlist")
				{
					add_playlist();
				}
				
				if (event.item.@name == "music")
				{
					var echo:Echonest = new Echonest;
					var api_key:String = "5TTVQT9W99PC1OSRZ";
					var artist:String = "Amon amarth";
					var title:String = "asator";
					var format:String = "json";
					var bucket:String = "json&bucket=id:7digital-US&bucket=audio_summary&bucket=tracks";
					var token:mx.rpc.AsyncToken = echo.search_song(api_key, artist, title, format,  bucket);
				}
			}
			
			public function add_playlist () : void
			{
				/* TODO : Implementer une fenêtre où remplir le nom de la playlist */
				
				/* Ajoute la playlist dans la base et dans la liste des playlists de l'Application */
				var name:String = "";
				var insert_play:String = "INSERT INTO Playlist (Name) VALUES ('"+name+"')";
				var sql_res:SQLResult = Database.exec_query(null,  insert_play);
				if (sql_res != null)
				{
					var playlist:Object = new Object;
					playlist.ID_Playlist = sql_res.lastInsertRowID;
					playlist.Name = name;
					playlist.Musics = new Array;
					Application.Instance.list_playlist.push(playlist);
				}
				
				/* TODO : Afficher la playlist nouvellement créée ds la partie correspondante */
			}
			
			
			public function init_All() : void
			{
				var app:Application = Application.Instance;
				
				app.display.fill_tab(Application.Instance.list_music);
				app.display.fill_playlist(Application.Instance.list_playlist);

			}
			
			
			protected function SpeekerLevel_changeHandler(event:Event):void
			{
				//trace (String(event.currentTarget.value));
				var appli:Application = Application.Instance;
				appli._player.change_volume (event.currentTarget.value);
			}
			
			protected function Rewind_clickHandler(event:MouseEvent):void
			{
				var appli:Application = Application.Instance;
				appli._player.rewind();
			}
			
			protected function forwind_clickHandler(event:MouseEvent):void
			{
				var appli:Application = Application.Instance;
				appli._player.forward();
				
			}
			
			protected function ShuffleButton_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function RepeatButton_clickHandler(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			protected function PlayProgress_changeHandler(event:Event):void
			{
				// TODO Auto-generated method stub
					
			}
			
			
			protected function progressBar_changeHandler(event:Event):void
			{
				progressBar.value = event.currentTarget.value;
				var appli:Application = Application.Instance;
				appli._player.change_position(event.currentTarget.value);
				
			}
			
			protected function refererRowDoubleClicked(e:ListEvent):void 
			{
				var music:Music = new Music;
				music.Artist = e.itemRenderer.data.ArtistField;
				music.Album = e.itemRenderer.data.AlbumField;
				music.Genre = e.itemRenderer.data.GenreField;
				music.ID_Music = e.itemRenderer.data.ID;
				music.Path = e.itemRenderer.data.Path;
				
				Application.Instance._player.music_list.push(music);
			}
			
			
			protected function GenreTable_itemClickHandler(event:ListEvent):void
			{
				Application.Instance.display.musicCollection.removeAll();
				Application.Instance.display.artistCollection.removeAll();
				Application.Instance.display.albumCollection.removeAll();
				
				Application.Instance.display.artistTab.push({ArtistBase:"Tout"});
				Application.Instance.display.albumTab.push({AlbumBase:"Tout"});
				if (event.itemRenderer.data.GenreBase != "Tout")
				{
					Application.Instance.display.update(DB.Database.list_query("select * from Music where Music.genre = \""+event.itemRenderer.data.GenreBase+"\""));
				}
				else
				{
					Application.Instance.display.update(Application.Instance.list_music);
				}
			}
			
			protected function ArtistTable_itemClickHandler(event:ListEvent):void
			{
				Application.Instance.display.musicCollection.removeAll();
				Application.Instance.display.albumCollection.removeAll();			
				
				Application.Instance.display.albumTab.push({AlbumBase:"Tout"});
				if (event.itemRenderer.data.ArtistBase != "Tout")
				{
					Application.Instance.display.update(DB.Database.list_query("select * from Music where Music.artist = \""+event.itemRenderer.data.ArtistBase+"\""));
				}
				else
				{
					Application.Instance.display.update(DB.Database.list_query("select * from Music"));
				}
			}
			
			protected function AlbumTable_itemClickHandler(event:ListEvent):void
			{
				Application.Instance.display.musicCollection.removeAll();
				
				if (event.itemRenderer.data.AlbumBase != "Tout")
				{
					Application.Instance.display.update(DB.Database.list_query("select * from Music where Music.album = \""+event.itemRenderer.data.AlbumBase+"\""));
				}
				else
				{
					Application.Instance.display.update(Application.Instance.list_music);
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Placer ici les éléments non visuels (services et objets de valeur, par exemple). -->
	</fx:Declarations>
	<s:VGroup width="100%" height="100%" verticalAlign="top">
		<s:HGroup id="MenuGroup" width="100%" height="3%">
			<mx:MenuBar id="myMenuBar" labelField="@label" itemClick="menuBar_clickHandler(event)">
				<fx:XMLList>
					<menuitem label="Fichier">
						<menuitem label="Ajouter un dossier" name="add"/>
						<menuitem label="Ouvrir un fichier" name="open"/>
						<menuitem label = "Creer une playlist" name="add_playlist"/>
						<menuitem label ="Importer une playlist"/>
					</menuitem>
					<menuitem label="test">
				    	<menuitem label="Add genre" name="genre"/>
						<menuitem label="Add Music" name="music"/>
					</menuitem>
				</fx:XMLList>
			</mx:MenuBar>
		</s:HGroup>
		<s:HGroup width="100%" height="85%">
			<s:VGroup id="InfoPlaylistGroup" width="30%" height="100%">
				<mx:DataGrid id="PlaylistTab" width="100%" height="50%"
							 itemClick="PlaylistTab_itemClickHandler(event)"
							dataProvider="{Application.Instance.display.playCollection}">
					<mx:columns>
							<mx:DataGridColumn dataField="PlaylistField" headerText="Playlist"/>
					</mx:columns>
				</mx:DataGrid>
				<s:SWFLoader id="Econest_Image" width="100%" height="40%"/>
				<s:Label id="Name" fontFamily="Times New Roman" fontSize="22" text="Name"/>
				<s:Label id="ArtisteDisplay" text="Artiste"/>
				<s:Label id="AlbumInfo" text="Album"/>
			</s:VGroup>
			<s:Scroller width="70%" height="100%">
				<s:VGroup id="MusicGroup" width="100%" height="100%">
					<s:HGroup id="EasySearch" width="100%" height="35%">
						<mx:DataGrid id="GenreTable" width="33%" height="100%" borderVisible="true"
									color="#FFFFFF" contentBackgroundColor="#D2CACA"
									dataProvider="{Application.Instance.display.genreCollection}"
									itemClick="GenreTable_itemClickHandler(event)"
									selectionColor="#656060">
							<mx:columns>
									<mx:DataGridColumn dataField="GenreBase" headerText="Genre"/>	
							</mx:columns>
							
						</mx:DataGrid>
						<mx:DataGrid id="ArtistTable" width="33%" height="100%"
									contentBackgroundColor="#CEC6C6"
									dataProvider="{Application.Instance.display.artistCollection}"
									itemClick="ArtistTable_itemClickHandler(event)"
									selectionColor="#726C6C">
							<mx:columns>
								
									<mx:DataGridColumn dataField="ArtistBase" headerText="Artiste"/>
							  
							</mx:columns>
						</mx:DataGrid>
						<mx:DataGrid id="AlbumTable" width="31%" height="100%" borderVisible="true"
									chromeColor="#816A6A" contentBackgroundColor="#CEC7C7"
									dataProvider="{Application.Instance.display.albumCollection}"
									itemClick="AlbumTable_itemClickHandler(event)"
									selectionColor="#60635F">
							<mx:columns>
								
									<mx:DataGridColumn dataField="AlbumBase" headerText="Album"/>
								
							</mx:columns>
						</mx:DataGrid>
					</s:HGroup>
					<mx:DataGrid id="MusicTable" width="99%" height="65%" borderVisible="false"
								 color="#FFFFFF" contentBackgroundColor="#D1C6C6"
								 dataProvider="{Application.Instance.display.musicCollection}" editable="false" selectionColor="#605B5B"
								 doubleClickEnabled="true" itemDoubleClick="refererRowDoubleClicked(event)">
						<mx:columns>
							
								<mx:DataGridColumn dataField="test" headerText=""  itemRenderer="mx.controls.CheckBox"/>
								<mx:DataGridColumn dataField="TitleField" headerText="Titre"/>
								<mx:DataGridColumn dataField="ArtistField" headerText="Artiste"/>
								<mx:DataGridColumn dataField="AlbumField" headerText="Album"/>
								<mx:DataGridColumn dataField="GenreField" headerText="Genre"/>
								<mx:DataGridColumn dataField="LengthField" headerText="Durée"/>
							
						</mx:columns>
					</mx:DataGrid>
				</s:VGroup>
			</s:Scroller>
		</s:HGroup>
		<s:VGroup width="100%" height="20%">
			<s:VGroup id="ListeLecture" width="100%" height="70%" verticalAlign="top">
				<s:SWFLoader width="10%" height="80%"/>
				<s:HScrollBar width="100%"/>
			</s:VGroup>
			<s:HGroup id="PlayElement" width="100%" height="11%" verticalAlign="middle">
				<s:Button id="Rewind" y="20" width="10%" height="100%" label="Rewind"
						  click="Rewind_clickHandler(event)"/>
				<s:Button id="Play" y="20" width="10%" height="100%" label="Play"
						  click="Play_clickHandler(event)"/>
				<s:Button id="Stop" y="21" width="10%" height="100%" label="Stop"
						  click="Stop_clickHandler(event)"/>
				<s:Button id="forwind" y="19" width="10%" height="100%" label="Forwind"
						  click="forwind_clickHandler(event)"/>
				<s:HSlider id="SpeekerLevel" width="71" change="SpeekerLevel_changeHandler(event)"
						   maximum="1" minimum="0" snapInterval="0.01" value="1"/>
				<s:HSlider id="progressBar" width="90%" change="progressBar_changeHandler(event)"
						   maximum="100" minimum="0" skinClass="spark.skins.spark.HSliderSkin"
						   stepSize="0.05"/>
				
				<!--<mx:ProgressBar id="progressBar" visible="true" y="8" width="326" height="100%"
								label="Time" color="#FF0E0E" direction="right" enabled="true"
								indeterminate="false"
								labelPlacement="right"
								barSkin="skins.CustomSkin"
								mode="manual"
								maximum="100" minimum="0"/>-->
				
				<s:ToggleButton id="ShuffleButton" width="10%" height="100%" label="Shuffle"
								click="ShuffleButton_clickHandler(event)"/>
				<s:ToggleButton id="RepeatButton" width="10%" height="100%" label="Repeat"
								click="RepeatButton_clickHandler(event)"/>
			</s:HGroup>
		</s:VGroup>
	</s:VGroup>
</s:WindowedApplication>
